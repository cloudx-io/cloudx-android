name: üèóÔ∏è Build Release Branch

on:
  push:
    branches:
      - 'release/**'
  pull_request:
    branches:
      - 'release/**'
      - 'main'
    types: [opened, synchronize, reopened]


jobs:
  build:
    name: build-sdk-release-android
    runs-on: self-hosted
    outputs:
      artifact-url: ${{ steps.upload-artifact.outputs.artifact-url  }}
      version: ${{ steps.extract-version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - name: set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Run Unit Tests
        run: ./gradlew :sdk:test
      - name: Extract version from libs.versions.toml
        id: extract-version
        run: |
          VERSION=$(grep '^sdkVersionName = ' gradle/libs.versions.toml | sed 's/sdkVersionName = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Extract short commit SHA
        id: short-sha
        run: echo "short_sha=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT
      - name: Build APK with Gradle
        run: ./gradlew clean --refresh-dependencies assembleDebug
      - name: Check folder with APK
        run: ls -la ./app/build/outputs/apk/debug
      - name: upload-artifact
        id: upload-artifact
        uses: actions/upload-artifact@master
        with:
          name: cloudx-sdk-android-apk-${{ steps.extract-version.outputs.version }}
          path: ./app/build/outputs/apk/debug/cloudx-demo-debug-${{ steps.extract-version.outputs.version }}.apk

      - name: üì¢ Slack Notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: custom
          custom_payload: |
            {
              "text": "ü§ñ CloudX Demo APK Build #${{ github.run_number }} finished",
              "attachments": [{
                "author_name": "cloudexchange.android.sdk/build-demo-android",
                "fallback": "Demo APK build pipeline finished",
                "color": "${{ job.status == 'success' && 'good' || 'danger' }}",
                "fields": [
                  {
                    "title": "Status",
                    "value": "${{ job.status == 'success' && '‚úÖ Success' || '‚ùå Failed' }}",
                    "short": true
                  },
                  {
                    "title": "Version",
                    "value": "`${{ steps.extract-version.outputs.version }}`",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "`${{ github.ref_name }}`",
                    "short": true
                  },
                  {
                    "title": "Commit",
                    "value": "`${{ steps.short-sha.outputs.short_sha }}`",
                    "short": true
                  },
                  {
                    "title": "APK Status",
                    "value": "${{ job.status == 'success' && 'üì± Demo APK built and uploaded' || '‚ùå APK build failed' }}",
                    "short": false
                  },
                  {
                    "title": "Pipeline Log",
                    "value": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Pipeline Log>",
                    "short": true
                  },
                  {
                    "title": "Artifacts",
                    "value": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Download APK>",
                    "short": true
                  }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.CLOUDX_ALERTS_MOBILE_SLACK }}

  dispatch:
    name: trigger-autotest
    runs-on: self-hosted
    needs: build
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: 'cloudx-xenoss',
              repo: 'cloudexchange.sdk.android.automated.testing',
              workflow_id: 'android.yml',
              ref: 'master',
              inputs: {
                'artifact-url' : '${{ needs.build.outputs.artifact-url }}',
              },
            });