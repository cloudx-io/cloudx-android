name: üöÄ Publish CloudX SDK

on:
  push:
    tags:
      - 'v-sdk-*'

env:
  ANDROID_HOME: /Users/administrator/Library/Android/sdk

jobs:
  determine-sdk:
    runs-on: self-hosted
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      shouldPublish: ${{ steps.extract-version.outputs.shouldPublish }}
    steps:
      - name: üè∑ Extract version from tag
        id: extract-version
        run: |
          if [[ "${{ github.ref_name }}" == v-sdk-* ]]; then
            echo "version=${GITHUB_REF_NAME#v-sdk-}" >> $GITHUB_OUTPUT
            echo "shouldPublish=true" >> $GITHUB_OUTPUT
          else
            echo "No matching SDK tag pattern. Skipping..."
            echo "shouldPublish=false" >> $GITHUB_OUTPUT
            exit 0
          fi

  publish-sdk:
    needs: determine-sdk
    runs-on: self-hosted
    if: ${{ needs.determine-sdk.outputs.shouldPublish == 'true' }}
    name: üì¶ Publish CloudX SDK
    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v4

      - name: ‚òï Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: üîê Make Gradle executable
        run: chmod +x ./gradlew

      # Additional SDK checks can be added here
      - name: üß™ Run SDK Tests
        run: ./gradlew :sdk:test

      - name: üìä Upload Test Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports-${{ github.run_number }}
          path: |
            sdk/build/reports/tests/
            sdk/build/test-results/

      - name: üìã Generate Test Summary
        if: always()
        run: |
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          if [ -f sdk/build/test-results/test/TEST-*.xml ]; then
            TOTAL=$(grep -o 'tests="[0-9]*"' sdk/build/test-results/test/TEST-*.xml | head -1 | grep -o '[0-9]*')
            FAILURES=$(grep -o 'failures="[0-9]*"' sdk/build/test-results/test/TEST-*.xml | head -1 | grep -o '[0-9]*')
            ERRORS=$(grep -o 'errors="[0-9]*"' sdk/build/test-results/test/TEST-*.xml | head -1 | grep -o '[0-9]*')
            SKIPPED=$(grep -o 'skipped="[0-9]*"' sdk/build/test-results/test/TEST-*.xml | head -1 | grep -o '[0-9]*')
            PASSED=$((TOTAL - FAILURES - ERRORS - SKIPPED))

            if [ $((FAILURES + ERRORS)) -eq 0 ]; then
              echo "‚úÖ All tests passed!" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå Some tests failed!" >> $GITHUB_STEP_SUMMARY
            fi

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Total:** $TOTAL" >> $GITHUB_STEP_SUMMARY
            echo "- **Passed:** ‚úÖ $PASSED" >> $GITHUB_STEP_SUMMARY
            echo "- **Failed:** ‚ùå $((FAILURES + ERRORS))" >> $GITHUB_STEP_SUMMARY
            echo "- **Skipped:** ‚è≠Ô∏è $SKIPPED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è No test results found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: üïµÔ∏è Log Maven Central and GPG Secrets (partially)
        run: |
          echo "üîê mavenCentralUsername: ${ORG_GRADLE_PROJECT_mavenCentralUsername:0:4}"
          echo "üîê mavenCentralPassword is set: [${#ORG_GRADLE_PROJECT_mavenCentralPassword}] characters"
          echo "üîè signingInMemoryKey is set: $([ -z \"$ORG_GRADLE_PROJECT_signingInMemoryKey\" ] && echo '‚ùå NO' || echo '‚úÖ YES')"
          echo "üîè signingInMemoryKeyPassword is set: $([ -z \"$ORG_GRADLE_PROJECT_signingInMemoryKeyPassword\" ] && echo '‚ùå NO' || echo '‚úÖ YES')"
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.ORG_GRADLE_PROJECT_mavenCentralUsername }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.ORG_GRADLE_PROJECT_mavenCentralPassword }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.ORG_GRADLE_PROJECT_signingInMemoryKey }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.ORG_GRADLE_PROJECT_signingInMemoryKeyPassword }}

      - name: üõ†Ô∏è Build SDK Release AAR
        run: ./gradlew :sdk:assembleRelease -Pcloudx.endpoint.config=https://example.com/config.json -Pversion=${{ needs.determine-sdk.outputs.version }}

      - name: üì¶ Publish SDK to Maven Central
        run: ./gradlew :sdk:publishToMavenCentral --no-daemon --stacktrace -Pcloudx.endpoint.config=https://example.com/config.json -Pversion=${{ needs.determine-sdk.outputs.version }}
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.ORG_GRADLE_PROJECT_mavenCentralUsername }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.ORG_GRADLE_PROJECT_mavenCentralPassword }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.ORG_GRADLE_PROJECT_signingInMemoryKey }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.ORG_GRADLE_PROJECT_signingInMemoryKeyPassword }}

      - name: üì§ Upload SDK AAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdk-release-${{ needs.determine-sdk.outputs.version }}
          path: sdk/build/outputs/aar/sdk-release.aar

      #      - name: üöÄ Create GitHub Release with SDK AAR
      #        uses: softprops/action-gh-release@v1
      #        with:
      #          name: Release ${{ github.ref_name }}
      #          tag_name: ${{ github.ref_name }}
      #          files: sdk/build/outputs/aar/sdk-release.aar
      #        env:
      #          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üì¢ Slack Notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: custom
          custom_payload: |
            {
              "text": "üöÄ CloudX SDK Publishing #${{ github.run_number }} finished",
              "attachments": [{
                "author_name": "cloudx-android/publish-sdk",
                "fallback": "SDK publishing pipeline finished",
                "color": "${{ job.status == 'success' && 'good' || 'danger' }}",
                "fields": [
                  {
                    "title": "Status",
                    "value": "${{ job.status == 'success' && '‚úÖ Success' || '‚ùå Failed' }}",
                    "short": true
                  },
                  {
                    "title": "SDK Version",
                    "value": "`${{ needs.determine-sdk.outputs.version }}`",
                    "short": true
                  },
                  {
                    "title": "Tag",
                    "value": "`${{ github.ref_name }}`",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "`${{ github.ref_name }}`",
                    "short": true
                  },
                  {
                    "title": "Maven Central",
                    "value": "${{ job.status == 'success' && 'üì§ Uploaded to Maven Central (~30 min to publish)' || '‚ùå Upload failed' }}",
                    "short": false
                  },
                  {
                    "title": "Pipeline Log",
                    "value": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Pipeline Log>",
                    "short": true
                  },
                  {
                    "title": "Artifacts",
                    "value": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Download AAR>",
                    "short": true
                  }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.CLOUDX_ALERTS_MOBILE_SLACK }}