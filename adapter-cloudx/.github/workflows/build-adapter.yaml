name: macstadium-publish-adapter

on:
  push:
    branches: [ "main", "develop" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main", "develop" ]

env:
  ANDROID_HOME: /Users/administrator/Library/Android/sdk
  PAT_USERNAME: ${{ secrets.PAT_USERNAME }}
  PAT_TOKEN: ${{ secrets.PAT_TOKEN }}

jobs:
  build:
    name: Build Adapter AAR
    runs-on: self-hosted

    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v4

      - name: ‚òï Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: üîê Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      - name: üõ†Ô∏è Build Adapter AAR
        run: ./gradlew clean assembleRelease -Pcloudx.endpoint.config=https://example.com/config.json -PuseRemoteSdk=true


      - name: üìÇ Show Adapter AAR Output
        run: |
          echo "üìÅ AAR files in build/outputs/aar:"
          ls -lh build/outputs/aar || { echo '‚ùå No AAR files found!'; exit 1; }

      - name: üìù Print PAT_USERNAME before publish
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "PAT_USERNAME=$PAT_USERNAME"
          echo "GITHUB_ACTOR=$GITHUB_ACTOR"

      - name: üì§ Upload AAR Artifact (for debugging/download)
        uses: actions/upload-artifact@v4
        with:
          name: cloudx-adapter-cloudx-aar
          path: build/outputs/aar/*.aar

      - name: üßæ Debug - List files before Release step
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          ls -lh build/outputs/aar || echo 'No AAR files found!'

      - name: üöÄ Create GitHub Release with AAR (on Tag)
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          files: build/outputs/aar/*.aar
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: üïµÔ∏è Log Maven Central and GPG Secrets (partially)
        run: |
          echo "üîê mavenCentralUsername: ${ORG_GRADLE_PROJECT_mavenCentralUsername:0:4}"
          echo "üîê mavenCentralPassword is set: [${#ORG_GRADLE_PROJECT_mavenCentralPassword}] characters"
          echo "üîè signingInMemoryKey is set: $([ -z \"$ORG_GRADLE_PROJECT_signingInMemoryKey\" ] && echo '‚ùå NO' || echo '‚úÖ YES')"
          echo "üîè signingInMemoryKeyPassword is set: $([ -z \"$ORG_GRADLE_PROJECT_signingInMemoryKeyPassword\" ] && echo '‚ùå NO' || echo '‚úÖ YES')"
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.ORG_GRADLE_PROJECT_mavenCentralUsername }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.ORG_GRADLE_PROJECT_mavenCentralPassword }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.ORG_GRADLE_PROJECT_signingInMemoryKey }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.ORG_GRADLE_PROJECT_signingInMemoryKeyPassword }}

      - name: üì¶ Publish to Maven Central
        if: startsWith(github.ref, 'refs/tags/')
        run: ./gradlew publishToMavenCentral --no-daemon --stacktrace -Pcloudx.endpoint.config=https://example.com/config.json
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.ORG_GRADLE_PROJECT_mavenCentralUsername }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.ORG_GRADLE_PROJECT_mavenCentralPassword }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.ORG_GRADLE_PROJECT_signingInMemoryKey }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.ORG_GRADLE_PROJECT_signingInMemoryKeyPassword }}

      - name: üü¢ [LOG] Show environment variables before dispatch
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "Triggering distribution release workflow with:"
          echo "  TAG: $TAG"
          echo "  ARTIFACT_URL: $ARTIFACT_URL"
          echo "  ADAPTER: $ADAPTER"
        env:
          TAG: ${{ github.ref_name }}
          ARTIFACT_URL: https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/cloudx-adapter-cloudx-release.aar
          ADAPTER: cloudx-adapter-cloudx.internal

      - name: üü¢ Trigger distribution repo release workflow
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/github-script@v7
        env:
          TAG: ${{ github.ref_name }}
          ARTIFACT_URL: https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/cloudx-adapter-cloudx-release.aar
          ADAPTER: cloudx-adapter-cloudx.internal
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            console.log("=== Triggering distribution-release.yml in target repo ===");
            console.log("TAG: ", process.env.TAG);
            console.log("ARTIFACT_URL: ", process.env.ARTIFACT_URL);
            console.log("ADAPTER: ", process.env.ADAPTER);

            try {
              const response = await github.rest.actions.createWorkflowDispatch({
                owner: 'cloudx-xenoss',
                repo: 'cloudexchange.android.adapter-cloudx',
                workflow_id: 'distribution-release.yml',
                ref: 'main',
                inputs: {
                  tag: process.env.TAG,
                  artifact_url: process.env.ARTIFACT_URL,
                  adapter: process.env.ADAPTER
                }
              });
              console.log("‚úÖ WorkflowDispatch response:", JSON.stringify(response.data, null, 2));
            } catch (error) {
              console.error("‚ùå Failed to dispatch workflow:", error);
              throw error; // Fails the step so you see it in GitHub logs
            }
      
      

